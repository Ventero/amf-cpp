#include "gtest/gtest.h"

#include "amf.hpp"
#include "types/amfvector.hpp"

template<typename T>
static void isEqual(const std::vector<u8>& expected, AmfVector<T> vector) {
	ASSERT_EQ(expected, vector.serialize());
}

TEST(VectorSerializationTest, EmptyVectorInt) {
	AmfVector<int> vec({}, false);
	v8 expected { 0x0d, 0x01, 0x00 };
	ASSERT_EQ(expected, vec.serialize());

	vec = {{}, true};
	expected = { 0x0d, 0x01, 0x01 };
	ASSERT_EQ(expected, vec.serialize());
}

TEST(VectorSerializationTest, VectorInt) {
	AmfVector<int> vec({ 1, 2, 3 }, false);
	v8 expected {
		0x0d, 0x07, 0x00,
		0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x03
	};
	ASSERT_EQ(expected, vec.serialize());

	vec = {{ 0xff, 0x100, 0xfffe, 0xffff, 0x123456, 0xfffffff }, true};
	expected = {
		0x0d, 0x0d, 0x01,
		0x00, 0x00, 0x00, 0xff,
		0x00, 0x00, 0x01, 0x00,
		0x00, 0x00, 0xff, 0xfe,
		0x00, 0x00, 0xff, 0xff,
		0x00, 0x12, 0x34, 0x56,
		0x0f, 0xff, 0xff, 0xff
	};
	ASSERT_EQ(expected, vec.serialize());
}

TEST(VectorSerializationTest, VectorInt32) {
	AmfVector<int> vec({
		0x20000000,
		0x40000000,
		0x7fffffff
	}, true);
	v8 expected {
		0x0d, 0x07, 0x01,
		0x20, 0x00, 0x00, 0x00,
		0x40, 0x00, 0x00, 0x00,
		0x7f, 0xff, 0xff, 0xff
	};
	ASSERT_EQ(expected, vec.serialize());
}

TEST(VectorSerializationTest, VectorIntNegative) {
	AmfVector<int> vec({ -1, -2, -0xffff }, false);
	v8 expected {
		0x0d, 0x07, 0x00,
		0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xfe,
		0xff, 0xff, 0x00, 0x01
	};
	ASSERT_EQ(expected, vec.serialize());
}

TEST(VectorSerializationTest, VectorInt32Negative) {
	AmfVector<int> vec({
		-0x20000000,
		-0x40000000,
		-0x7fffffff,
		-2147483648
	}, true);
	v8 expected {
		0x0d, 0x09, 0x01,
		0xe0, 0x00, 0x00, 0x00,
		0xc0, 0x00, 0x00, 0x00,
		0x80, 0x00, 0x00, 0x01,
		0x80, 0x00, 0x00, 0x00
	};
	ASSERT_EQ(expected, vec.serialize());
}

TEST(VectorSerializationTest, VectorIntFixedDefault) {
	AmfVector<int> vec({1, 3, 5});
	v8 expected {
		0x0d, 0x07, 0x00,
		0x00, 0x00, 0x00, 0x01,
		0x00, 0x00, 0x00, 0x03,
		0x00, 0x00, 0x00, 0x05
	};
	ASSERT_EQ(expected, vec.serialize());
}
